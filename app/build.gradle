plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.efhem.farmapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Read the API key from ./secure.properties into R.string.maps_api_key
        def secureProps = new Properties()
        if (file("../secure.properties").exists()) {
            file("../secure.properties")?.withInputStream { secureProps.load(it) }
        }
        resValue "string", "maps_api_key", (secureProps.getProperty("MAPS_API_KEY") ?: "")

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

}

dependencies {

    def appDependencies = rootProject.ext.appDependencies
    def dataDependencies = rootProject.ext.dataDependencies

    implementation appDependencies.appCompat
    implementation appDependencies.androidxKtx
    implementation appDependencies.constraintLayout
    implementation appDependencies.supportV4
    implementation(appDependencies.material)
    //Jetpack
    implementation appDependencies.fragmentKtx
    implementation appDependencies.activityKtx
    implementation appDependencies.lifecycleExtensions
    implementation appDependencies.lifecycleViewModel
    implementation appDependencies.lifecyclerRuntime
    implementation appDependencies.navigationFragment
    implementation appDependencies.navigationUI
    //koin: dependency injection
    implementation appDependencies.koinViemodel
    //android coroutine support
    implementation appDependencies.coroutineAndroid
    //Material
    implementation appDependencies.material
    //google service
    implementation appDependencies.googleService
    implementation appDependencies.googleMap
    //multidex
    //implementation(appDependencies.multidex)

    // CircularImageView
    implementation(appDependencies.circularImageView)
    //imageCropper
    implementation(appDependencies.imageCropper)
    //glideCompiler
    implementation(appDependencies.glide)
    annotationProcessor(appDependencies.glideCompiler)

    implementation dataDependencies.kotlin
    implementation dataDependencies.coroutinesCore
    //local
    implementation dataDependencies.room
    implementation(dataDependencies.roomCoroutinSupport)
    kapt dataDependencies.roomCompiler
    //remote
    implementation dataDependencies.retrofit
    implementation dataDependencies.moshiConverter
    implementation dataDependencies.squarwMoshiKotlin
    implementation dataDependencies.loggingInterceptor
    implementation(dataDependencies.gson)
    implementation(dataDependencies.workManager)


    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}